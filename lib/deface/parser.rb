require 'nokogiri'
require 'erubis'
require 'cgi'

module Deface
  class Parser
    # converts erb to markup
    #
    def self.erb_markup!(source)
      replacements = [ {"<%=" => "<code erb-loud>"},
                       {"<%"  => "<code erb-silent>"},
                       {"%>"  => "</code>"} ]

      replacements.each{ |h| h.each { |replace, with| source.gsub! replace, with } }

      source.scan(/(<code.*?>)((?:(?!<\/code>)[\s\S])*)(<\/code>)/).each do |match|
        source.gsub!("#{match[0]}#{match[1]}#{match[2]}", "#{match[0]}#{CGI.escapeHTML(match[1])}#{match[2]}")
      end

      source
    end

    # undoes ERB markup generated by Deface::Parser::ERB
    #
    def self.undo_erb_markup!(source)
      replacements = [ {"<code erb-silent>" => '<%'},
                       {"<code erb-loud>"   => '<%='},
                       {"</code>"           => '%>'},
                       {/(<|&lt;)code erb-silent(&gt;|>)/ => '<%'},
                       {/(<|&lt;)code erb-loud(&gt;|>)/   => '<%='},
                       {/(<|&lt;)\/code(&gt;|>)/          => '%>'} ]

      replacements.each{ |h| h.each { |replace, with| source.gsub! replace, with } }

      #double un-escape as Nokogiri escapes onces as well as erb-markup!
      source.scan(/(<%.*?)((?:(?!%>)[\s\S])*)(%>)/).each do |match|
        source.gsub!("#{match[0]}#{match[1]}#{match[2]}", "#{match[0]}#{CGI.unescapeHTML CGI.unescapeHTML(match[1])}#{match[2]}")
      end

      source
    end

    def self.convert(source)
      erb_markup!(source)

      if source =~ /(<html.*?)((?:(?!>)[\s\S])*)(>)/
        Nokogiri::HTML::Document.parse(source)
      else
        Nokogiri::HTML::DocumentFragment.parse(source)
      end
    end

  end
end
