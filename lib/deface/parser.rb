require 'nokogiri'
require 'erubis'

module Deface
  class Parser
    # undoes ERB markup generated by Deface::Parser::ERB
    #
    def self.undo_erb_markup(source)
      source.gsub! /(<|&lt;)erb-silent(&gt;|>)/, '<% '
      source.gsub! /(<|&lt;)erb-loud(&gt;|>)/, '<%= '
      source.gsub! /(<|&lt;)\/erb-(loud|silent)(&gt;|>)/, ' %>'
      source.gsub! /(?!=<%=?)&gt;(?=.*%>)/, '>'
      source
    end


    def self.convert_fragment(source)
      source = Deface::Parser::ERB.compile(source)
      Nokogiri::HTML::DocumentFragment.parse(source)
    end

    # A class for converting ERB code into a format that's easier
    # for css & xpath querying4

    # the erb tags are converted to html tags in the following way.
    # `<% ... %>` is converted into `<erb-silent> ... </erb-silent>`.
    # `<%= ... %>` is converted into `<erb-loud> ... </erb-loud>`.
    #
    class ERB < Erubis::Basic::Engine
      # Compiles an ERB template into a HTML document containing `erb-` tags.
      # 100% borrowed from HTML2HAML .. thank you team HAML.
      #
      # @param template [String] The ERB template
      # @return [String] The output document
      def self.compile(template)
        new(template).src
      end

      # not supported (yet?)
      def escaped_expr(code)
        raise "Not Supported"
      end

      # The conversion has no preamble.
      def add_preamble(src); end

      # The conversion has no postamble.
      def add_postamble(src); end

      # Concatenates the text onto the source buffer.
      #
      # @param src [String] The source buffer
      # @param text [String] The raw text to add to the buffer
      def add_text(src, text)
        src << text
      end

      # Concatenates a silent Ruby statement onto the source buffer.
      # This uses the `<erb-silent>` tag
      #
      # @param src [String] The source buffer
      # @param code [String] The Ruby statement to add to the buffer
      def add_stmt(src, code)
        arr = code.scan /^(\s*)/
        whitespace = arr.flatten.first
        newline = code.gsub!(/\n/, "")
        src << whitespace << "<erb-silent>" << code.strip << "</erb-silent>"
        src << "\n" if newline
      end

      # Concatenates a Ruby expression that's printed to the document
      # onto the source buffer.
      # This uses the `<erb-silent>` tag
      #
      # @param src [String] The source buffer
      # @param code [String] The Ruby expression to add to the buffer
      def add_expr_literal(src, code)
        arr = code.scan /^(\s*)/
        whitespace = arr.flatten.first
        newline = code.gsub!(/\n/, "")
        src << whitespace << "<erb-loud>" << code.strip << "</erb-loud>"
        src << "\n" if newline
      end

      # not supported (yet?)
      def add_expr_debug(src, code)
         raise "Not Supported"
      end
    end
  end
end
