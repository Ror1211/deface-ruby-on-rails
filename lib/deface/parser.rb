require 'nokogiri'
require 'erubis'

module Deface
  class Parser
    # converts erb to markup
    #
    def self.erb_markup!(source)
      replacements = [ {"<%=" => "<code erb-loud>"},
                       {"<%"  => "<code erb-silent>"},
                       {"%>"  => "</code>"} ]

      replacements.each{ |h| h.each { |replace, with| source.gsub! replace, with } }
      source
    end

    # undoes ERB markup generated by Deface::Parser::ERB
    #
    def self.undo_erb_markup!(source)
      replacements = [ {"<code erb-silent>" => '<%'},
                       {"<code erb-loud>"   => '<%='},
                       {"</code>"           => '%>'},
                       {/(<|&lt;)code erb-silent(&gt;|>)/ => '<%'},
                       {/(<|&lt;)code erb-loud(&gt;|>)/   => '<%='},
                       {/(<|&lt;)\/code(&gt;|>)/          => '%>'},
                       {/(?!=<%=?)&gt;(?=.*%>)/           => '>'},
                       {/(?!=<%=?)&lt;(?=.*%>)/           => '<'}]

      replacements.each{ |h| h.each { |replace, with| source.gsub! replace, with } }
      source
    end


    def self.convert_fragment(source)
      erb_markup!(source)
      Nokogiri::HTML::DocumentFragment.parse(source)
    end

  end
end
